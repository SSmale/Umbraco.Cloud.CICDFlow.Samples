name: pipeline

on:
  push:
    branches:
     - main

env:
  projectId: ${{ vars.PROJECT_ID }} # Set as variable
  umbracoCloudApiKey: ${{ secrets.UMBRACO_CLOUD_API_KEY }} # set as secret

# Actual build and test steps has been omitted from this pipeline sample
jobs:
  publish:
    name: Zip and Publish to Cloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Gets the latest CICD Flow deployment if there is any
      # Will write "latestDeploymentId" to pipeline variables, value can be an uuid or empty string 
      - name: Get Latest Deployment
        id: latest-deployment
        shell: pwsh
        run: >
          ${{GITHUB.WORKSPACE}}/.github/powershell/get-latest-deployment.ps1 
          -ProjectId ${{ env.projectId }} 
          -ApiKey ${{ env.umbracoCloudApiKey }} 
          -PipelineVendor GITHUB
      
      ## TODO: MISSING LOGIC
      # If "latestDeploymentId" is '', then skip the ahead to "Prepare Cloud Git Ignore"

      # Download git-patch file based on latest deployment
      # Will write "remoteChanges" to pipeline variables, value can be "yes" or "no"
      # When "remoteChanges" is yes, there will also be downloaded a patch-file to the path you specified in -DownloadFolder parameter
      - name: Fetch Changes From Cloud
        id: latest-changes
        shell: pwsh
        run: >
          ${{GITHUB.WORKSPACE}}/.github/powershell/get-changes-by-id.ps1 
          -ProjectId ${{ env.projectId }} 
          -ApiKey ${{ env.umbracoCloudApiKey }} 
          -DeploymentId ${{ steps.latest-deployment.outputs.latestDeploymentId}}
          -DownloadFolder ${{GITHUB.WORKSPACE}}/patch
          -PipelineVendor GITHUB

      ## TODO: MISSING LOGIC
      # Possible strategies
      # - Apply changes to pipeline and maybe continue flow
      # - Create a new branch with changes and end this pipeline flow
      # - (something else we haven't thought of yet)

      # switch the gitignore files so cloud does not ignore the build frontend assets
      - name: Prepare Cloud Git Ignore
        run: cp cloud.gitignore .gitignore
        shell: bash

      # zip everything, except what is defined in the '.zipignore'
      - name: Zip Source Code
        run: zip -r sources.zip . -x@cloud.zipignore
        shell: bash

      # Request to prepare a deployment
      # - sets the commit message to be used in cloud 
      # - supplies you with a deploymentId to be used in the rest of the process
      - name: Create Deployment Meta
        id: deployment-meta
        shell: pwsh
        run: >
          ${{GITHUB.WORKSPACE}}/.github/powershell/new-deployment.ps1 
          -ProjectId ${{ env.projectId }} 
          -ApiKey ${{ env.umbracoCloudApiKey }} 
          -CommitMessage "Run number ${{github.run_number}}" 
          -PipelineVendor GITHUB

      # Upload your zipped artifact
      - name: Post Zipped Artifact
        shell: pwsh
        run: >
          ${{GITHUB.WORKSPACE}}/.github/powershell/add-deployment-package.ps1 
          -ProjectId ${{ env.projectId }} 
          -DeploymentId ${{ steps.deployment-meta.outputs.deploymentId }} 
          -ApiKey ${{ env.umbracoCloudApiKey }} 
          -FilePath ${{ GITHUB.WORKSPACE }}/sources.zip

      # Actually request to start the deployment process in cloud
      - name: Request Start Deployment
        shell: pwsh
        run: >
          ${{GITHUB.WORKSPACE}}/.github/powershell/start-deployment.ps1 
          -ProjectId ${{ env.projectId }} 
          -DeploymentId ${{ steps.deployment-meta.outputs.deploymentId }} 
          -ApiKey ${{ env.umbracoCloudApiKey }}

      # Poll until deployment finishes 
      - name: Wait for deployment completed 
        shell: pwsh
        run: >
          ${{GITHUB.WORKSPACE}}/.github/powershell/test-deployment-status.ps1 
          -ProjectId ${{ env.projectId }} 
          -DeploymentId ${{ steps.deployment-meta.outputs.deploymentId }} 
          -ApiKey ${{ env.umbracoCloudApiKey }}
